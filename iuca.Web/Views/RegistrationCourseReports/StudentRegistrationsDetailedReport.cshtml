@using iuca.Application.Enums
@model StudentRegistrationDetailedReportViewModel

@{
    int num = 0;
    string regStateBgClass = "";
    string addDropStateBgClass = "";

    int notSentQty = 0;
    int onApprovalQty = 0;
    int notApprovedQty = 0;
    int approvedQty = 0;
    int submittedQty = 0;
}

<div class="container p3">
    <div class="row pt-4">
        <div class="col-12 p-0">
            <h3 class="text-uppercase">Student Registrations report - @ViewBag.DeanName</h3>
        </div>
    </div>
    <hr>
    <form method="get" asp-action="StudentRegistrationsDetailedReport">
        <div class="row">
            @if (ViewBag.IsAdmin)
            {
                <div class="col-lg-6 col-12">
                    <div class="form-group row">
                        <div class="col-3">
                            <label>Dean:</label>
                        </div>
                        <div class="col-9">
                            <select class="form-control dropdown" name="deanUserId" id="deanUserId" asp-items="@ViewBag.Deans">
                                <option value="">Not selected</option>
                            </select>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <input type="hidden" name="deanUserId" value="@ViewBag.DeanUserId" />
            }
            <div class="col-lg-6 col-12">
                <div class="form-group row">
                    <div class="col-3">
                        <label>Semester:</label>
                    </div>
                    <div class="col-9">
                        <select class="form-control dropdown" name="semesterId" id="semesterId" asp-items="@ViewBag.Semesters">
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-12">
                <div class="form-group row">
                    <div class="col-3">
                        <label>Department:</label>
                    </div>
                    <div class="col-9">
                        <select class="form-control dropdown" name="departmentId" id="departmentId" asp-items="@ViewBag.Departments">
                            <option value="">Not selected</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="col-lg-6 col-12">
                <div class="form-group row">
                    <div class="col-3">
                        <label>Registration state:</label>
                    </div>
                    <div class="col-9">
                        <select class="form-control dropdown" name="registrationState" id="registrationState" asp-items="@ViewBag.RegistrationStates">
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12 text-right">
                <button type="submit" class="btn btn-primary">
                    <i class="fab fa-sistrix"></i> &nbsp; Show
                </button>
            </div>
        </div>
    </form>
    <br>
    @{
        notSentQty = Model.StudentReportRows.Count(x => x.RegistrationState == enu_RegistrationState.NotSpecified || 
            x.RegistrationState == enu_RegistrationState.NotSent);

        onApprovalQty = Model.StudentReportRows.Count(x => x.RegistrationState == enu_RegistrationState.OnApproval ||
            x.RegistrationState == enu_RegistrationState.Submitted && x.AddDropState == enu_RegistrationState.OnApproval);

        notApprovedQty = Model.StudentReportRows.Count(x => x.RegistrationState == enu_RegistrationState.NotApproved ||
            x.RegistrationState == enu_RegistrationState.Submitted && x.AddDropState == enu_RegistrationState.NotApproved);

        approvedQty = Model.StudentReportRows.Count(x => x.RegistrationState == enu_RegistrationState.Approved ||
            x.RegistrationState == enu_RegistrationState.Submitted && x.AddDropState == enu_RegistrationState.Approved);

        submittedQty = Model.StudentReportRows.Count(x => x.RegistrationState == enu_RegistrationState.Submitted &&
            x.AddDropState == enu_RegistrationState.NotSent || x.AddDropState == enu_RegistrationState.Submitted);
    }

    <div class="row p-2 text-right">
        <div class="col-lg-2 col-4">
        </div>
        <div class="col-lg-2 col-4">
            <b>Not sent: @notSentQty</b>
        </div>
        <div class="col-lg-2 col-4">
            <b>On approval: @onApprovalQty</b>
        </div>
        <div class="col-lg-2 col-4">
            <b>Not approved: @notApprovedQty</b>
        </div>
        <div class="col-lg-2 col-4">
            <b>Approved: @approvedQty</b>
        </div>
        <div class="col-lg-2 col-4">
            <b>Submitted: @submittedQty/@Model.StudentReportRows.Count()</b>
        </div>
    </div>
    @foreach(var department in Model.StudentReportRows.GroupBy(x => x.Department).OrderBy(x => x.Key))
    {
        num = 0;

        notSentQty = department.Count(x => x.RegistrationState == enu_RegistrationState.NotSpecified || 
            x.RegistrationState == enu_RegistrationState.NotSent);

        onApprovalQty = department.Count(x => x.RegistrationState == enu_RegistrationState.OnApproval ||
            x.RegistrationState == enu_RegistrationState.Submitted && x.AddDropState == enu_RegistrationState.OnApproval);

        notApprovedQty = department.Count(x => x.RegistrationState == enu_RegistrationState.NotApproved ||
            x.RegistrationState == enu_RegistrationState.Submitted && x.AddDropState == enu_RegistrationState.NotApproved);

        approvedQty = department.Count(x => x.RegistrationState == enu_RegistrationState.Approved ||
            x.RegistrationState == enu_RegistrationState.Submitted && x.AddDropState == enu_RegistrationState.Approved);

        submittedQty = department.Count(x => x.RegistrationState == enu_RegistrationState.Submitted &&
            x.AddDropState == enu_RegistrationState.NotSent || x.AddDropState == enu_RegistrationState.Submitted);

        <div class="row p-2 bg-dark-lilac font-weight-bold text-right">
            <div class="col-lg-2 col-4">
                @department.Key
            </div>
            <div class="col-lg-2 col-4">
                Not sent: @notSentQty
            </div>
            <div class="col-lg-2 col-4">
                On approval: @onApprovalQty
            </div>
            <div class="col-lg-2 col-4">
                Not approved: @notApprovedQty
            </div>
            <div class="col-lg-2 col-4">
                Approved: @approvedQty
            </div>
            <div class="col-lg-2 col-4">
                Submitted: @submittedQty/@department.Count()
            </div>
        </div>
        foreach (var registration in department.OrderBy(x => x.Group).ThenBy(x => x.StudentName))
        {
            num++;
            regStateBgClass = "";
            addDropStateBgClass = "";

            if (registration.RegistrationState == enu_RegistrationState.NotSent ||
                registration.RegistrationState == enu_RegistrationState.NotSpecified)
            {
                regStateBgClass = "red-bg";
                addDropStateBgClass = "red-bg";
            }
            else if (registration.RegistrationState == enu_RegistrationState.OnApproval)
            {
                regStateBgClass = "blue-bg";
                addDropStateBgClass = "green-bg";
            }
            else if (registration.RegistrationState == enu_RegistrationState.NotApproved)
            {
                regStateBgClass = "orange-bg";
                addDropStateBgClass = "green-bg";
            }
            else if (registration.RegistrationState == enu_RegistrationState.Approved)
            {
                regStateBgClass = "yellow-bg";
                addDropStateBgClass = "green-bg";
            }
            else if (registration.RegistrationState == enu_RegistrationState.Submitted)
            {
                regStateBgClass = "green-bg";
                addDropStateBgClass = "green-bg";

                if (registration.AddDropState == enu_RegistrationState.OnApproval)
                {
                    addDropStateBgClass = "blue-bg";
                }
                else if (registration.AddDropState == enu_RegistrationState.NotApproved)
                {
                    addDropStateBgClass = "orange-bg";
                }
                else if (registration.AddDropState == enu_RegistrationState.Approved)
                {
                    addDropStateBgClass = "yellow-bg";
                }
            }

            <div class="row p-2 border-top">
                <div class="col-1">
                    @num
                </div>
                <div class="col-lg-4 col-7">
                    <b>@registration.StudentName</b>
                </div>
                <div class="col-lg-1 col-4">
                    @registration.Group
                </div>
                <div class="col-lg-2 col-6 @regStateBgClass">
                    Registration: <b>@registration.RegistrationState</b>
                </div>
                <div class="col-lg-2 col-6 @addDropStateBgClass">
                    Add/Drop: <b>@registration.AddDropState</b>
                </div>
                <div class="col-lg-2 col-12">
                    @registration.AdviserName
                </div>
            </div>
        }
    }
    
</div>


