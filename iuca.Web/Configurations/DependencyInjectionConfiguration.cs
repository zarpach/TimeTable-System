using iuca.Application.DTO.Users.Students;
using iuca.Application.Interfaces.Common;
using iuca.Application.Interfaces.Courses;
using iuca.Application.Interfaces.ExportData;
using iuca.Application.Interfaces.Grades;
using iuca.Application.Interfaces.ImportData;
using iuca.Application.Interfaces.Reports;
using iuca.Application.Interfaces.Roles;
using iuca.Application.Interfaces.Slots;
using iuca.Application.Interfaces.Users;
using iuca.Application.Interfaces.Users.Instructors;
using iuca.Application.Interfaces.Users.Staff;
using iuca.Application.Interfaces.Users.Students;
using iuca.Application.Interfaces.Users.UserInfo;
using iuca.Application.Services.Common;
using iuca.Application.Services.Courses;
using iuca.Application.Services.ExportData;
using iuca.Application.Services.Grades;
using iuca.Application.Services.ImportData;
using iuca.Application.Services.Reports;
using iuca.Application.Services.Roles;
using iuca.Application.Services.Slots;
using iuca.Application.Services.Users;
using iuca.Application.Services.Users.Instructors;
using iuca.Application.Services.Users.Staff;
using iuca.Application.Services.Users.Students;
using iuca.Application.Services.Users.UserInfo;
using iuca.Infrastructure.Identity;
using iuca.Infrastructure.Identity.Entities;
using iuca.Infrastructure.Persistence;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.DependencyInjection;

namespace iuca.Web.Configurations
{
    public static class DependencyInjectionConfiguration
    {
        public static void Configure(IServiceCollection services)
        {
            services.AddScoped<IApplicationDbContext>(provider => provider.GetService<ApplicationDbContext>());
            services.AddScoped<ApplicationUserManager<ApplicationUser>>();
            services.AddScoped<RoleManager<ApplicationRole>>();
            services.AddScoped<IRoleService, RoleService>();
            services.AddScoped<IClaimService, ClaimService>();
            services.AddScoped<IPermissionService, PermissionService>();
            services.AddScoped<IUserRolesService, UserRolesService>();
            services.AddScoped<IUserBasicInfoService, UserBasicInfoService>();
            services.AddScoped<IInstructorBasicInfoService, InstructorBasicInfoService>();
            services.AddScoped<IInstructorOtherJobInfoService, InstructorOtherJobInfoService>();
            services.AddScoped<IInstructorEducationInfoService, InstructorEducationInfoService>();
            services.AddScoped<IInstructorContactInfoService, InstructorContactInfoService>();
            services.AddScoped<IInstructorOrgInfoService, InstructorOrgInfoService>();
            services.AddScoped<IInstructorInfoService, InstructorInfoService>();
            services.AddScoped<IStudentBasicInfoService, StudentBasicInfoService>();
            services.AddScoped<IStudentContactInfoService, StudentContactInfoService>();
            services.AddScoped<IStudentParentsInfoService, StudentParentsInfoService>();
            services.AddScoped<IStudentInfoService, StudentInfoService>();
            services.AddScoped<IStaffBasicInfoService, StaffBasicInfoService>();
            services.AddScoped<IStaffInfoService, StaffInfoService>();
            services.AddScoped<IUserInfoService, UserInfoService>();
            services.AddScoped<IOrganizationService, OrganizationService>();
            services.AddScoped<IUserTypeOrganizationService, UserTypeOrganizationService>();
            services.AddScoped<INationalityService, NationalityService>();
            services.AddScoped<ICountryService, CountryService>();
            services.AddScoped<IDepartmentService, DepartmentService>();
            services.AddScoped<IUniversityService, UniversityService>();
            services.AddScoped<IEducationTypeService, EducationTypeService>();
            services.AddScoped<ISemesterService, SemesterService>();
            services.AddScoped<ISemesterPeriodService, SemesterPeriodService>();
            services.AddScoped<ILanguageService, LanguageService>();
            services.AddScoped<ICoursePrerequisiteService, CoursePrerequisiteService>();
            services.AddScoped<ICourseService, CourseService>();
            services.AddScoped<ICycleService, CycleService>();
            services.AddScoped<IAcademicPlanService, AcademicPlanService>();
            services.AddScoped<IDepartmentGroupService, DepartmentGroupService>();
            services.AddScoped<IOldStudyCardService, OldStudyCardService>();
            services.AddScoped<IStudentCourseRegistrationService, StudentCourseRegistrationService>();
            services.AddScoped<IStudentCourseService, StudentCourseService>();
            services.AddScoped<IStudentOrgInfoService, StudentOrgInfoService>();
            services.AddScoped<IAdviserStudentService, AdviserStudentService>();
            services.AddScoped<IStudentDebtService, StudentDebtService>();
            services.AddScoped<IGradeService, GradeService>();
            services.AddScoped<IImportCountryService, ImportCountryService>();
            services.AddScoped<IImportCourseService, ImportCourseService>();
            services.AddScoped<IImportDepartmentGroupService, ImportDepartmentGroupService>();
            services.AddScoped<IImportDepartmentService, ImportDepartmentService>();
            services.AddScoped<IImportGradeService, ImportGradeService>();
            services.AddScoped<IImportHelperService, ImportHelperService>();
            services.AddScoped<IImportLanguageService, ImportLanguageService>();
            services.AddScoped<IImportNationalityService, ImportNationalityService>();
            services.AddScoped<IImportStudentGradeService, ImportStudentGradeService>();
            services.AddScoped<IImportStudentService, ImportStudentService>();
            services.AddScoped<IImportStudentEmailService, ImportStudentEmailService>();
            services.AddScoped<IImportUniversityService, ImportUniversityService>();
            services.AddScoped<IImportTransferCourseService, ImportTransferCourseService>();
            services.AddScoped<IImportEducationTypeService, ImportEducationTypeService>();
            services.AddScoped<IImportInstructorService, ImportInstructorService>();
            services.AddScoped<IImportInstructorEmailService, ImportInstructorEmailService>();
            services.AddScoped<IImportRegistrationCourseService, ImportRegistrationCourseService>();
            services.AddScoped<IStudentTranscriptService, StudentTranscriptService>();
            services.AddScoped<ITransferCourseService, TransferCourseService>();
            services.AddScoped<IDeanService, DeanService>();
            services.AddScoped<IStudentReportService, StudentReportService>();
            services.AddScoped<IStudentCourseTempService, StudentCourseTempService>();
            services.AddScoped<IRegistrationCourseService, RegistrationCourseService>();
            services.AddScoped<IStudentRegistrationReportService, StudentRegistrationReportService>();
            services.AddScoped<IExportStudentCourseService, ExportStudentCourseService>();
            services.AddScoped<IInstructorCourseService, InstructorCourseService>();
            services.AddScoped<IImportStudentCourseService, ImportStudentCourseService>();
            services.AddScoped<IExportStudentGradeService, ExportStudentGradeService>();
            services.AddScoped<IExportRegistrationCourseService, ExportRegistrationCourseService>();
            services.AddScoped<IExportInstructorService, ExportInstructorService>();
            services.AddScoped<IExportCourseService, ExportCourseService>();
            services.AddScoped<IRegistrationCourseManagementService, RegistrationCourseManagementService>();
            services.AddScoped<IGradeManagementService, GradeManagementService>();
            services.AddScoped<IEnvarSettingService, EnvarSettingService>();
            services.AddScoped<ISyllabusService, SyllabusService>();
            services.AddScoped<IAcademicPolicyService, AcademicPolicyService>();
            services.AddScoped<ICourseRequirementService, CourseRequirementService>();
            services.AddScoped<ICourseCalendarRowService, CourseCalendarRowService>();
            services.AddScoped<IPolicyService, PolicyService>();
            services.AddScoped<IStudyCardService, StudyCardService>();
            services.AddScoped<IStudyCardCourseService, StudyCardCourseService>();
            services.AddScoped<IStudentMinorInfoService, StudentMinorInfoService>();
            services.AddScoped<IAcademicLeaveOrderService, AcademicLeaveOrderService>();
            services.AddScoped<IReinstatementExpulsionOrderService, ReinstatementExpulsionOrderService>();
            services.AddScoped<IGroupTransferOrderService, GroupTransferOrderService>();
            services.AddScoped<IProposalCourseService, ProposalCourseService>();
            services.AddScoped<IProposalService, ProposalService>();
            services.AddScoped<IAnnouncementService, AnnouncementService>();
            services.AddScoped<IAnnouncementSectionService, AnnouncementSectionService>();
            services.AddScoped<IStudentMidtermService, StudentMidtermService>();
            services.AddScoped<IAttendanceService, AttendanceService>();
            services.AddScoped<IAttendanceClassService, AttendanceClassService>();
            services.AddScoped<IAttendanceFolderService, AttendanceFolderService>();
            services.AddScoped<ISlotService, SlotService>();
            services.AddScoped<ILessonPeriodService, LessonPeriodService>();
            services.AddScoped<ILessonRoomService, LessonRoomService>();
        }
    }
}
