// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using iuca.Infrastructure.Persistence;

#nullable disable

namespace iuca.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240213054931_AttendanceFolders")]
    partial class AttendanceFolders
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("iuca.Domain.Entities.Common.AttendanceFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FolderId")
                        .HasColumnType("text");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("AttendanceFolders");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ImportCode")
                        .HasColumnType("integer");

                    b.Property<string>("NameEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameKir")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameRus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SortNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "NA",
                            ImportCode = 0,
                            NameEng = "Not assigned",
                            NameKir = "Не указана",
                            NameRus = "Не указана",
                            SortNum = 0
                        });
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ImportCode")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("NameEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameKir")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameRus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "NA",
                            ImportCode = 0,
                            IsActive = true,
                            NameEng = "Not assigned",
                            NameRus = "Не указано",
                            OrganizationId = 1
                        });
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.EducationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ImportCode")
                        .HasColumnType("integer");

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameKir")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameRus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("EducationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImportCode = 0,
                            NameEng = "Not assigned",
                            NameKir = "Не указана",
                            NameRus = "Не указана"
                        });
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.EnvarSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentSemester")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultInstructor")
                        .HasColumnType("text");

                    b.Property<int>("MaxRegistrationCredits")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("UpcomingSemester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("EnvarSettings");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Gpa")
                        .HasColumnType("real");

                    b.Property<string>("GradeMark")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("ImportCode")
                        .HasColumnType("integer");

                    b.Property<string>("NameEng")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameKir")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameRus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ImportCode")
                        .HasColumnType("integer");

                    b.Property<string>("NameEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameKir")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameRus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SortNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Na",
                            ImportCode = 0,
                            NameEng = "Not assigned",
                            NameKir = "Не указан",
                            NameRus = "Не указан",
                            SortNum = 0
                        });
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ImportCode")
                        .HasColumnType("integer");

                    b.Property<string>("NameEng")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameKir")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameRus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImportCode = 0,
                            NameEng = "Not assigned",
                            NameKir = "Не указана",
                            NameRus = "Не указана",
                            SortNum = 0
                        });
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMain = true,
                            Name = "Университет МУЦА"
                        },
                        new
                        {
                            Id = 2,
                            IsMain = false,
                            Name = "Колледж МУЦА"
                        });
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionEng")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("DescriptionKir")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("DescriptionRus")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameKir")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameRus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.SemesterPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SemesterId");

                    b.ToTable("SemesterPeriods");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.StudentSemesterGPA", b =>
                {
                    b.Property<string>("StudentUserId")
                        .HasColumnType("text");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.Property<float>("GPA")
                        .HasColumnType("real");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("StudentUserId", "Season", "Year");

                    b.HasIndex("OrganizationId");

                    b.ToTable("StudentSemesterGPAs");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.StudentTotalGPA", b =>
                {
                    b.Property<string>("StudentUserId")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<float>("TotalGPA")
                        .HasColumnType("real");

                    b.HasKey("StudentUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("StudentTotalGPAs");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("ImportCode")
                        .HasColumnType("integer");

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameKir")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameRus")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "NA",
                            ImportCode = 0,
                            NameEng = "Not assigned",
                            NameKir = "Не указана",
                            NameRus = "Не указана"
                        });
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.AcademicPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AcademicPlans");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.AcademicPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SyllabusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId", "Name")
                        .IsUnique();

                    b.ToTable("AcademicPolicies");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttendanceSpreadsheetId")
                        .HasColumnType("text");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForAll")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SemesterId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.AnnouncementSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseDetId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<float>("Credits")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<IEnumerable<string>>("ExtraInstructorsJson")
                        .HasColumnType("jsonb");

                    b.Property<bool>("GradeSheetSubmitted")
                        .HasColumnType("boolean");

                    b.Property<IEnumerable<string>>("GroupsJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("InstructorUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsChanged")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("MarkedDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Places")
                        .HasColumnType("integer");

                    b.Property<string>("Schedule")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.Property<string>("Section")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AnnouncementSections");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnouncementSectionId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("StudentUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementSectionId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.AttendanceClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttendanceId")
                        .HasColumnType("integer");

                    b.Property<string>("Data")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Mark")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.ToTable("AttendanceClasses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CourseType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("ImportCode")
                        .HasColumnType("integer");

                    b.Property<bool>("IsChanged")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("NameKir")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("NameRus")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("SortNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.CourseCalendarRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Assignments")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SyllabusId")
                        .HasColumnType("integer");

                    b.Property<string>("Topics")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Week")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("CourseCalendar");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.CoursePrerequisite", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("PrerequisiteId")
                        .HasColumnType("integer");

                    b.HasKey("CourseId", "PrerequisiteId");

                    b.HasIndex("PrerequisiteId");

                    b.ToTable("CoursePrerequisites");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.CourseRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Name")
                        .HasColumnType("integer");

                    b.Property<float>("Points")
                        .HasColumnType("real");

                    b.Property<int>("SyllabusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("CourseRequirements");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Cycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameKir")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameRus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.CyclePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("AcademicPlanPart")
                        .HasColumnType("integer");

                    b.Property<int>("CycleId")
                        .HasColumnType("integer");

                    b.Property<int>("ReqPts")
                        .HasColumnType("integer");

                    b.Property<int>("ReqPtsCrs1Sem1")
                        .HasColumnType("integer");

                    b.Property<int>("ReqPtsCrs1Sem2")
                        .HasColumnType("integer");

                    b.Property<int>("ReqPtsCrs2Sem1")
                        .HasColumnType("integer");

                    b.Property<int>("ReqPtsCrs2Sem2")
                        .HasColumnType("integer");

                    b.Property<int>("ReqPtsCrs3Sem1")
                        .HasColumnType("integer");

                    b.Property<int>("ReqPtsCrs3Sem2")
                        .HasColumnType("integer");

                    b.Property<int>("ReqPtsCrs4Sem1")
                        .HasColumnType("integer");

                    b.Property<int>("ReqPtsCrs4Sem2")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AcademicPlanId");

                    b.HasIndex("CycleId");

                    b.ToTable("CycleParts");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.CyclePartCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("CyclePartId")
                        .HasColumnType("integer");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("PtsCrs1Sem1")
                        .HasColumnType("integer");

                    b.Property<int>("PtsCrs1Sem2")
                        .HasColumnType("integer");

                    b.Property<int>("PtsCrs2Sem1")
                        .HasColumnType("integer");

                    b.Property<int>("PtsCrs2Sem2")
                        .HasColumnType("integer");

                    b.Property<int>("PtsCrs3Sem1")
                        .HasColumnType("integer");

                    b.Property<int>("PtsCrs3Sem2")
                        .HasColumnType("integer");

                    b.Property<int>("PtsCrs4Sem1")
                        .HasColumnType("integer");

                    b.Property<int>("PtsCrs4Sem2")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CyclePartId");

                    b.ToTable("CyclePartCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.ExtraInstructor", b =>
                {
                    b.Property<int>("AnnouncementSectionId")
                        .HasColumnType("integer");

                    b.Property<string>("InstructorUserId")
                        .HasColumnType("text");

                    b.HasKey("AnnouncementSectionId", "InstructorUserId");

                    b.HasIndex("InstructorUserId");

                    b.ToTable("ExtraInstructors");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.OldStudyCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CyclePartCourseId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CyclePartCourseId");

                    b.HasIndex("DepartmentGroupId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SemesterId");

                    b.ToTable("OldStudyCards");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.OldStudyCardCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CyclePartCourseId")
                        .HasColumnType("integer");

                    b.Property<int?>("InstructorBasicInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("InstructorUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsVacancy")
                        .HasColumnType("boolean");

                    b.Property<int>("OldStudyCardId")
                        .HasColumnType("integer");

                    b.Property<int>("Places")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CyclePartCourseId");

                    b.HasIndex("InstructorBasicInfoId");

                    b.HasIndex("InstructorUserId");

                    b.HasIndex("OldStudyCardId");

                    b.ToTable("OldStudyCardCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SemesterId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.ProposalCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<float>("Credits")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<IEnumerable<string>>("InstructorsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForAll")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<int>("ProposalId")
                        .HasColumnType("integer");

                    b.Property<string>("Schedule")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ProposalId");

                    b.ToTable("ProposalCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudentCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<int>("Queue")
                        .HasColumnType("integer");

                    b.Property<int>("StudentCourseRegistrationId")
                        .HasColumnType("integer");

                    b.Property<int>("StudyCardCourseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentCourseRegistrationId");

                    b.HasIndex("StudyCardCourseId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudentCourseGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int?>("GradeId")
                        .HasColumnType("integer");

                    b.Property<int>("ImportCode")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<float>("Points")
                        .HasColumnType("real");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.Property<string>("StudentUserId")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GradeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("StudentCourseGrades");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudentCourseRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddDropState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("AdviserComment")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateChange")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAddDropApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("NoCreditsLimitation")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("StudentComment")
                        .HasColumnType("text");

                    b.Property<string>("StudentUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("StudentCourseRegistrations");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudentCourseTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnouncementSectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GradeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAddDropApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAddDropProcessed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAudit")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<bool>("MarkedDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("StudentCourseRegistrationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementSectionId");

                    b.HasIndex("GradeId");

                    b.HasIndex("StudentCourseRegistrationId");

                    b.ToTable("StudentCoursesTemp");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudentMidterm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdviserComment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("Attention")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("MaxScore")
                        .HasColumnType("integer");

                    b.Property<int?>("MidtermScore")
                        .HasColumnType("integer");

                    b.Property<string>("Recommendation")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("StudentCourseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentCourseId")
                        .IsUnique();

                    b.ToTable("StudentMidterms");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudyCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentGroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("DisplayIUCAElectives")
                        .HasColumnType("boolean");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentGroupId");

                    b.HasIndex("SemesterId", "DepartmentGroupId")
                        .IsUnique();

                    b.ToTable("StudyCards");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudyCardCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnouncementSectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("StudyCardId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudyCardId");

                    b.HasIndex("AnnouncementSectionId", "StudyCardId")
                        .IsUnique();

                    b.ToTable("StudyCardCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Syllabus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalResources")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int>("AnnouncementSectionId")
                        .HasColumnType("integer");

                    b.Property<string>("ApproverComment")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GradingComment")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("InstructorComment")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("InstructorPhone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Objectives")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("OfficeHours")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PrimaryResources")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TeachMethods")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementSectionId")
                        .IsUnique();

                    b.ToTable("Syllabi");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.TransferCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CyclePartCourseId")
                        .HasColumnType("integer");

                    b.Property<int?>("GradeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAcademicPlanCourse")
                        .HasColumnType("boolean");

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameKir")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameRus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<float>("Points")
                        .HasColumnType("real");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.Property<string>("StudentUserId")
                        .HasColumnType("text");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CyclePartCourseId");

                    b.HasIndex("GradeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StudentUserId");

                    b.HasIndex("UniversityId");

                    b.ToTable("TransferCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Instructors.AdviserStudent", b =>
                {
                    b.Property<string>("InstructorUserId")
                        .HasColumnType("text");

                    b.Property<string>("StudentUserId")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("InstructorUserId", "StudentUserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("AdviserStudents");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Instructors.InstructorBasicInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildrenQty")
                        .HasColumnType("integer");

                    b.Property<int>("ImportCode")
                        .HasColumnType("integer");

                    b.Property<string>("InstructorUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsChanged")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMainOrganization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarried")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("InstructorUserId")
                        .IsUnique();

                    b.ToTable("InstructorBasicInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Instructors.InstructorContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressEng")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AddressRus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CitizenshipAddressEng")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CitizenshipAddressRus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CitizenshipCityEng")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CitizenshipCityRus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CitizenshipCountryId")
                        .HasColumnType("integer");

                    b.Property<string>("CitizenshipPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CitizenshipStreetEng")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CitizenshipStreetRus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CitizenshipZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CityEng")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CityRus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactNameEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactNameRus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("InstructorBasicInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RelationEng")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RelationKir")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RelationRus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StreetEng")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StreetRus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CitizenshipCountryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstructorBasicInfoId")
                        .IsUnique();

                    b.ToTable("InstructorContactInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Instructors.InstructorEducationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EducationTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("GraduateYear")
                        .HasColumnType("integer");

                    b.Property<int>("InstructorBasicInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("MajorEng")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MajorKir")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MajorRus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EducationTypeId");

                    b.HasIndex("InstructorBasicInfoId");

                    b.HasIndex("UniversityId");

                    b.ToTable("InstructorEducationInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Instructors.InstructorOrgInfo", b =>
                {
                    b.Property<int>("InstructorBasicInfoId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("ImportCode")
                        .HasColumnType("integer");

                    b.Property<bool>("PartTime")
                        .HasColumnType("boolean");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("InstructorBasicInfoId", "OrganizationId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("InstructorOrgInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Instructors.InstructorOtherJobInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InstructorBasicInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PlaceNameEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlaceNameKir")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlaceNameRus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PositionEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PositionKir")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PositionRus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorBasicInfoId");

                    b.ToTable("InstructorOtherJobInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Staff.StaffBasicInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsMainOrganization")
                        .HasColumnType("boolean");

                    b.Property<string>("StaffInfo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("StaffBasicInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.AcademicLeaveOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Reason")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StudentUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("AcademicLeaveOrder");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.DepartmentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DepartmentGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "NA",
                            DepartmentId = 1,
                            OrganizationId = 1,
                            Year = 0
                        });
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.GroupTransferOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<IEnumerable<string>>("FutureAdvisorsJson")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<IEnumerable<string>>("PreviousAdvisorsJson")
                        .HasColumnType("jsonb");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("StudentUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TargetGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SourceGroupId");

                    b.HasIndex("StudentUserId");

                    b.HasIndex("TargetGroupId");

                    b.ToTable("GroupTransferOrders");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.ReinstatementExpulsionOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Reason")
                        .HasColumnType("integer");

                    b.Property<string>("StudentUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("ReinstatementExpulsionOrders");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentBasicInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<bool>("ArmyService")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMainOrganization")
                        .HasColumnType("boolean");

                    b.Property<int>("Toefl")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("StudentBasicInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CitizenshipCityEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CitizenshipCityRus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CitizenshipCountryId")
                        .HasColumnType("integer");

                    b.Property<string>("CitizenshipPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CitizenshipStreetEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CitizenshipStreetRus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CitizenshipZip")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CityEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CityRus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactNameEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactNameRus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RelationEng")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RelationKir")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RelationRus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StreetEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StreetRus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StudentBasicInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CitizenshipCountryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StudentBasicInfoId")
                        .IsUnique();

                    b.ToTable("StudentContactInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentDebt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<float>("DebtAmount")
                        .HasColumnType("real");

                    b.Property<int>("DebtType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDebt")
                        .HasColumnType("boolean");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<string>("StudentUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("StudentDebts");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentLanguage", b =>
                {
                    b.Property<int>("StudentBasicInfoId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.HasKey("StudentBasicInfoId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("StudentLanguages");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentMinorInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentBasicInfoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StudentBasicInfoId");

                    b.ToTable("StudentMinorInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentOrgInfo", b =>
                {
                    b.Property<int>("StudentBasicInfoId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentGroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPrep")
                        .HasColumnType("boolean");

                    b.Property<int?>("PrepDepartmentGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("StudentBasicInfoId", "OrganizationId");

                    b.HasIndex("DepartmentGroupId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PrepDepartmentGroupId");

                    b.ToTable("StudentOrgInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentParentsInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DeadYear")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Relation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("StudentBasicInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("WorkPlace")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("StudentBasicInfoId");

                    b.ToTable("StudentParentsInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.UserInfo.DeanAdviser", b =>
                {
                    b.Property<string>("DeanUserId")
                        .HasColumnType("text");

                    b.Property<string>("AdviserUserId")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("DeanUserId", "AdviserUserId", "OrganizationId");

                    b.HasIndex("AdviserUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DeanAdvisers");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.UserInfo.DeanDepartment", b =>
                {
                    b.Property<string>("DeanUserId")
                        .HasColumnType("text");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("DeanUserId", "DepartmentId", "OrganizationId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DeanDepartments");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.UserInfo.UserBasicInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<int?>("CitizenshipId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstNameRus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsMainOrganization")
                        .HasColumnType("boolean");

                    b.Property<string>("LastNameRus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleNameRus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("NationalityId");

                    b.ToTable("UserBasicInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.UserTypeOrganization", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("ApplicationUserId", "UserType", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserTypeOrganizations");
                });

            modelBuilder.Entity("iuca.Infrastructure.Identity.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstNameEng")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMainOrganization")
                        .HasColumnType("boolean");

                    b.Property<string>("LastNameEng")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleNameEng")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("iuca.Infrastructure.Identity.Entities.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.AttendanceFolder", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Semester", "Semester")
                        .WithMany("AttendanceFolders")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Department", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("Departments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.EnvarSetting", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("EnvarSettings")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Semester", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("Semesters")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.SemesterPeriod", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("SemesterPeriods")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Semester", "Semester")
                        .WithMany("SemesterPeriods")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.StudentSemesterGPA", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("StudentSemesterGPAs")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("StudentSemesterGPA")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.StudentTotalGPA", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("StudentTotalGPAs")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithOne("StudentTotalGPA")
                        .HasForeignKey("iuca.Domain.Entities.Common.StudentTotalGPA", "StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.University", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Country", "Country")
                        .WithMany("Universities")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.AcademicPlan", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Department", "Department")
                        .WithMany("AcademicPlans")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("AcademicPlans")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.AcademicPolicy", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.Syllabus", "Syllabus")
                        .WithMany("AcademicPolicies")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Announcement", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.Course", "Course")
                        .WithMany("Announcements")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Semester", "Semester")
                        .WithMany("Announcements")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.AnnouncementSection", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.Announcement", "Announcement")
                        .WithMany("AnnouncementSections")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Courses.Course", "Course")
                        .WithMany("AnnouncementSections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("AnnouncementSections")
                        .HasForeignKey("InstructorUserId");

                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("AnnouncementSections")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("Course");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Attendance", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.AnnouncementSection", "AnnouncementSection")
                        .WithMany("Attendances")
                        .HasForeignKey("AnnouncementSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnouncementSection");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.AttendanceClass", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.Attendance", "Attendance")
                        .WithMany("AttendanceClasses")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendance");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Course", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Language", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("Courses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.CourseCalendarRow", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.Syllabus", "Syllabus")
                        .WithMany("CourseCalendar")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.CoursePrerequisite", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.Course", "Course")
                        .WithMany("CoursePrerequisites")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Courses.Course", "Prerequisite")
                        .WithMany("Prerequisites")
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Prerequisite");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.CourseRequirement", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.Syllabus", "Syllabus")
                        .WithMany("CourseRequirements")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.CyclePart", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.AcademicPlan", "AcademicPlan")
                        .WithMany("CycleParts")
                        .HasForeignKey("AcademicPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Courses.Cycle", "Cycle")
                        .WithMany("CycleParts")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicPlan");

                    b.Navigation("Cycle");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.CyclePartCourse", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.Course", "Course")
                        .WithMany("CyclePartCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Courses.CyclePart", "CyclePart")
                        .WithMany("CyclePartCourses")
                        .HasForeignKey("CyclePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CyclePart");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.ExtraInstructor", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.AnnouncementSection", "AnnouncementSection")
                        .WithMany("ExtraInstructors")
                        .HasForeignKey("AnnouncementSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("ExtraInstructors")
                        .HasForeignKey("InstructorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnouncementSection");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.OldStudyCard", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.CyclePartCourse", null)
                        .WithMany("OldStudyCards")
                        .HasForeignKey("CyclePartCourseId");

                    b.HasOne("iuca.Domain.Entities.Users.Students.DepartmentGroup", "DepartmentGroup")
                        .WithMany("OldStudyCards")
                        .HasForeignKey("DepartmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("OldStudyCards")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Semester", "Semester")
                        .WithMany("OldStudyCards")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentGroup");

                    b.Navigation("Organization");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.OldStudyCardCourse", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.CyclePartCourse", "CyclePartCourse")
                        .WithMany("OldStudyCardCourses")
                        .HasForeignKey("CyclePartCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Users.Instructors.InstructorBasicInfo", null)
                        .WithMany("OldStudyCardCourses")
                        .HasForeignKey("InstructorBasicInfoId");

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("OldStudyCardCourses")
                        .HasForeignKey("InstructorUserId");

                    b.HasOne("iuca.Domain.Entities.Courses.OldStudyCard", "OldStudyCard")
                        .WithMany("OldStudyCardCourses")
                        .HasForeignKey("OldStudyCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CyclePartCourse");

                    b.Navigation("OldStudyCard");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Proposal", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Department", "Department")
                        .WithMany("Proposals")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Semester", "Semester")
                        .WithMany("Proposals")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.ProposalCourse", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.Course", "Course")
                        .WithMany("ProposalCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Courses.Proposal", "Proposal")
                        .WithMany("ProposalCourses")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudentCourse", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.StudentCourseRegistration", "StudentCourseRegistration")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentCourseRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Courses.OldStudyCardCourse", "OldStudyCardCourse")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudyCardCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OldStudyCardCourse");

                    b.Navigation("StudentCourseRegistration");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudentCourseGrade", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.Course", "Course")
                        .WithMany("StudentCourseGrades")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Grade", "Grade")
                        .WithMany("StudentCourseGrades")
                        .HasForeignKey("GradeId");

                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("StudentCourseGrades")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("StudentCourseGrades")
                        .HasForeignKey("StudentUserId");

                    b.Navigation("Course");

                    b.Navigation("Grade");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudentCourseRegistration", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("StudentCourseRegistrations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Semester", "Semester")
                        .WithMany("StudentCourseRegistrations")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("StudentCourseRegistrations")
                        .HasForeignKey("StudentUserId");

                    b.Navigation("Organization");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudentCourseTemp", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.AnnouncementSection", "AnnouncementSection")
                        .WithMany("StudentCourses")
                        .HasForeignKey("AnnouncementSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Grade", "Grade")
                        .WithMany("StudentCourseTemps")
                        .HasForeignKey("GradeId");

                    b.HasOne("iuca.Domain.Entities.Courses.StudentCourseRegistration", "StudentCourseRegistration")
                        .WithMany("StudentCoursesTemp")
                        .HasForeignKey("StudentCourseRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnouncementSection");

                    b.Navigation("Grade");

                    b.Navigation("StudentCourseRegistration");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudentMidterm", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.StudentCourseTemp", "StudentCourse")
                        .WithOne("StudentMidterm")
                        .HasForeignKey("iuca.Domain.Entities.Courses.StudentMidterm", "StudentCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentCourse");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudyCard", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Users.Students.DepartmentGroup", "DepartmentGroup")
                        .WithMany("StudyCards")
                        .HasForeignKey("DepartmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Semester", "Semester")
                        .WithMany("StudyCards")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentGroup");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudyCardCourse", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.AnnouncementSection", "AnnouncementSection")
                        .WithMany("StudyCardCourses")
                        .HasForeignKey("AnnouncementSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Courses.StudyCard", "StudyCard")
                        .WithMany("StudyCardCourses")
                        .HasForeignKey("StudyCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnouncementSection");

                    b.Navigation("StudyCard");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Syllabus", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.AnnouncementSection", "AnnouncementSection")
                        .WithOne("Syllabus")
                        .HasForeignKey("iuca.Domain.Entities.Courses.Syllabus", "AnnouncementSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnouncementSection");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.TransferCourse", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Courses.CyclePartCourse", "CyclePartCourse")
                        .WithMany("TransferCourses")
                        .HasForeignKey("CyclePartCourseId");

                    b.HasOne("iuca.Domain.Entities.Common.Grade", "Grade")
                        .WithMany("TransferCourses")
                        .HasForeignKey("GradeId");

                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("TransferCourses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("TransferCourses")
                        .HasForeignKey("StudentUserId");

                    b.HasOne("iuca.Domain.Entities.Common.University", "University")
                        .WithMany("TransferCourses")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CyclePartCourse");

                    b.Navigation("Grade");

                    b.Navigation("Organization");

                    b.Navigation("University");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Instructors.AdviserStudent", b =>
                {
                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("AdviserStudentInstructors")
                        .HasForeignKey("InstructorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("AdviserStudents")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("AdviserStudentStudents")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Instructors.InstructorBasicInfo", b =>
                {
                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithOne("InstructorBasicInfo")
                        .HasForeignKey("iuca.Domain.Entities.Users.Instructors.InstructorBasicInfo", "InstructorUserId");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Instructors.InstructorContactInfo", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Country", "CitizenshipCountry")
                        .WithMany("InstructorCitizenshipCountries")
                        .HasForeignKey("CitizenshipCountryId");

                    b.HasOne("iuca.Domain.Entities.Common.Country", "Country")
                        .WithMany("InstructorCountries")
                        .HasForeignKey("CountryId");

                    b.HasOne("iuca.Domain.Entities.Users.Instructors.InstructorBasicInfo", "InstructorBasicInfo")
                        .WithOne("InstructorContactInfo")
                        .HasForeignKey("iuca.Domain.Entities.Users.Instructors.InstructorContactInfo", "InstructorBasicInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CitizenshipCountry");

                    b.Navigation("Country");

                    b.Navigation("InstructorBasicInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Instructors.InstructorEducationInfo", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.EducationType", "EducationType")
                        .WithMany("InstructorEducationInfo")
                        .HasForeignKey("EducationTypeId");

                    b.HasOne("iuca.Domain.Entities.Users.Instructors.InstructorBasicInfo", "InstructorBasicInfo")
                        .WithMany("InstructorEducationInfo")
                        .HasForeignKey("InstructorBasicInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.University", "University")
                        .WithMany("InstructorEducationInfo")
                        .HasForeignKey("UniversityId");

                    b.Navigation("EducationType");

                    b.Navigation("InstructorBasicInfo");

                    b.Navigation("University");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Instructors.InstructorOrgInfo", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Department", "Department")
                        .WithMany("InstructorOrgInfo")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Users.Instructors.InstructorBasicInfo", "InstructorBasicInfo")
                        .WithMany("InstructorOrgInfo")
                        .HasForeignKey("InstructorBasicInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("InstructorOrgInfo")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("InstructorBasicInfo");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Instructors.InstructorOtherJobInfo", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Users.Instructors.InstructorBasicInfo", "instructorBasicInfo")
                        .WithMany("InstructorOtherJobInfo")
                        .HasForeignKey("InstructorBasicInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("instructorBasicInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Staff.StaffBasicInfo", b =>
                {
                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithOne("StaffBasicInfo")
                        .HasForeignKey("iuca.Domain.Entities.Users.Staff.StaffBasicInfo", "ApplicationUserId");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.AcademicLeaveOrder", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("AcademicLeaveOrders")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("AcademicLeaveOrders")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.DepartmentGroup", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Department", "Department")
                        .WithMany("DepartmentGroups")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.GroupTransferOrder", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("GroupTransferOrders")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Semester", "Semester")
                        .WithMany("GroupTransferOrders")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Users.Students.DepartmentGroup", "SourceGroup")
                        .WithMany("SourseGroupTransferOrders")
                        .HasForeignKey("SourceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("GroupTransferOrders")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Users.Students.DepartmentGroup", "TargetGroup")
                        .WithMany("TargetGroupTransferOrders")
                        .HasForeignKey("TargetGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Semester");

                    b.Navigation("SourceGroup");

                    b.Navigation("TargetGroup");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.ReinstatementExpulsionOrder", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("ReinstatementExpulsionOrders")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("ReinstatementExpulsionOrders")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentBasicInfo", b =>
                {
                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithOne("StudentBasicInfo")
                        .HasForeignKey("iuca.Domain.Entities.Users.Students.StudentBasicInfo", "ApplicationUserId");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentContactInfo", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Country", "CitizenshipCountry")
                        .WithMany("CitizenshipStudentContactInfo")
                        .HasForeignKey("CitizenshipCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Country", "Country")
                        .WithMany("StudentContactInfo")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Users.Students.StudentBasicInfo", "StudentBasicInfo")
                        .WithOne("StudentContactInfo")
                        .HasForeignKey("iuca.Domain.Entities.Users.Students.StudentContactInfo", "StudentBasicInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CitizenshipCountry");

                    b.Navigation("Country");

                    b.Navigation("StudentBasicInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentDebt", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Semester", "Semester")
                        .WithMany("StudentDebts")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("StudentDebts")
                        .HasForeignKey("StudentUserId");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentLanguage", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Language", "Language")
                        .WithMany("StudentLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Users.Students.StudentBasicInfo", "StudentBasicInfo")
                        .WithMany("StudentLanguages")
                        .HasForeignKey("StudentBasicInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("StudentBasicInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentMinorInfo", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Common.Department", "Department")
                        .WithMany("StudentMinorInfo")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Users.Students.StudentBasicInfo", "StudentBasicInfo")
                        .WithMany("StudentMinorInfo")
                        .HasForeignKey("StudentBasicInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("StudentBasicInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentOrgInfo", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Users.Students.DepartmentGroup", "DepartmentGroup")
                        .WithMany("StudentOrgInfo")
                        .HasForeignKey("DepartmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("StudentOrgInfo")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Users.Students.DepartmentGroup", "PrepDepartmentGroup")
                        .WithMany("PrepStudentOrgInfo")
                        .HasForeignKey("PrepDepartmentGroupId");

                    b.HasOne("iuca.Domain.Entities.Users.Students.StudentBasicInfo", "StudentBasicInfo")
                        .WithMany("StudentOrgInfo")
                        .HasForeignKey("StudentBasicInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentGroup");

                    b.Navigation("Organization");

                    b.Navigation("PrepDepartmentGroup");

                    b.Navigation("StudentBasicInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentParentsInfo", b =>
                {
                    b.HasOne("iuca.Domain.Entities.Users.Students.StudentBasicInfo", "StudentBasicInfo")
                        .WithMany("StudentParentsInfo")
                        .HasForeignKey("StudentBasicInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentBasicInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.UserInfo.DeanAdviser", b =>
                {
                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("DeanAdviserAdvisers")
                        .HasForeignKey("AdviserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("DeanAdviserDeans")
                        .HasForeignKey("DeanUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("DeanAdvisers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.UserInfo.DeanDepartment", b =>
                {
                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("DeanDepartments")
                        .HasForeignKey("DeanUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Department", "Department")
                        .WithMany("DeanDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("DeanDepartments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.UserInfo.UserBasicInfo", b =>
                {
                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithOne("UserBasicInfo")
                        .HasForeignKey("iuca.Domain.Entities.Users.UserInfo.UserBasicInfo", "ApplicationUserId");

                    b.HasOne("iuca.Domain.Entities.Common.Country", "Citizenship")
                        .WithMany("UserBasicInfo")
                        .HasForeignKey("CitizenshipId");

                    b.HasOne("iuca.Domain.Entities.Common.Nationality", "Nationality")
                        .WithMany("UserBasicInfo")
                        .HasForeignKey("NationalityId");

                    b.Navigation("Citizenship");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.UserTypeOrganization", b =>
                {
                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany("UserTypeOrganizations")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Domain.Entities.Common.Organization", "Organization")
                        .WithMany("UserTypeOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("iuca.Infrastructure.Identity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Country", b =>
                {
                    b.Navigation("CitizenshipStudentContactInfo");

                    b.Navigation("InstructorCitizenshipCountries");

                    b.Navigation("InstructorCountries");

                    b.Navigation("StudentContactInfo");

                    b.Navigation("Universities");

                    b.Navigation("UserBasicInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Department", b =>
                {
                    b.Navigation("AcademicPlans");

                    b.Navigation("Courses");

                    b.Navigation("DeanDepartments");

                    b.Navigation("DepartmentGroups");

                    b.Navigation("InstructorOrgInfo");

                    b.Navigation("Proposals");

                    b.Navigation("StudentMinorInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.EducationType", b =>
                {
                    b.Navigation("InstructorEducationInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Grade", b =>
                {
                    b.Navigation("StudentCourseGrades");

                    b.Navigation("StudentCourseTemps");

                    b.Navigation("TransferCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Language", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("StudentLanguages");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Nationality", b =>
                {
                    b.Navigation("UserBasicInfo");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Organization", b =>
                {
                    b.Navigation("AcademicLeaveOrders");

                    b.Navigation("AcademicPlans");

                    b.Navigation("AdviserStudents");

                    b.Navigation("AnnouncementSections");

                    b.Navigation("Courses");

                    b.Navigation("DeanAdvisers");

                    b.Navigation("DeanDepartments");

                    b.Navigation("Departments");

                    b.Navigation("EnvarSettings");

                    b.Navigation("GroupTransferOrders");

                    b.Navigation("InstructorOrgInfo");

                    b.Navigation("OldStudyCards");

                    b.Navigation("ReinstatementExpulsionOrders");

                    b.Navigation("SemesterPeriods");

                    b.Navigation("Semesters");

                    b.Navigation("StudentCourseGrades");

                    b.Navigation("StudentCourseRegistrations");

                    b.Navigation("StudentOrgInfo");

                    b.Navigation("StudentSemesterGPAs");

                    b.Navigation("StudentTotalGPAs");

                    b.Navigation("TransferCourses");

                    b.Navigation("UserTypeOrganizations");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.Semester", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("AttendanceFolders");

                    b.Navigation("GroupTransferOrders");

                    b.Navigation("OldStudyCards");

                    b.Navigation("Proposals");

                    b.Navigation("SemesterPeriods");

                    b.Navigation("StudentCourseRegistrations");

                    b.Navigation("StudentDebts");

                    b.Navigation("StudyCards");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Common.University", b =>
                {
                    b.Navigation("InstructorEducationInfo");

                    b.Navigation("TransferCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.AcademicPlan", b =>
                {
                    b.Navigation("CycleParts");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Announcement", b =>
                {
                    b.Navigation("AnnouncementSections");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.AnnouncementSection", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("ExtraInstructors");

                    b.Navigation("StudentCourses");

                    b.Navigation("StudyCardCourses");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Attendance", b =>
                {
                    b.Navigation("AttendanceClasses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Course", b =>
                {
                    b.Navigation("AnnouncementSections");

                    b.Navigation("Announcements");

                    b.Navigation("CoursePrerequisites");

                    b.Navigation("CyclePartCourses");

                    b.Navigation("Prerequisites");

                    b.Navigation("ProposalCourses");

                    b.Navigation("StudentCourseGrades");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Cycle", b =>
                {
                    b.Navigation("CycleParts");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.CyclePart", b =>
                {
                    b.Navigation("CyclePartCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.CyclePartCourse", b =>
                {
                    b.Navigation("OldStudyCardCourses");

                    b.Navigation("OldStudyCards");

                    b.Navigation("TransferCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.OldStudyCard", b =>
                {
                    b.Navigation("OldStudyCardCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.OldStudyCardCourse", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Proposal", b =>
                {
                    b.Navigation("ProposalCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudentCourseRegistration", b =>
                {
                    b.Navigation("StudentCourses");

                    b.Navigation("StudentCoursesTemp");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudentCourseTemp", b =>
                {
                    b.Navigation("StudentMidterm");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.StudyCard", b =>
                {
                    b.Navigation("StudyCardCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Courses.Syllabus", b =>
                {
                    b.Navigation("AcademicPolicies");

                    b.Navigation("CourseCalendar");

                    b.Navigation("CourseRequirements");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Instructors.InstructorBasicInfo", b =>
                {
                    b.Navigation("InstructorContactInfo");

                    b.Navigation("InstructorEducationInfo");

                    b.Navigation("InstructorOrgInfo");

                    b.Navigation("InstructorOtherJobInfo");

                    b.Navigation("OldStudyCardCourses");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.DepartmentGroup", b =>
                {
                    b.Navigation("OldStudyCards");

                    b.Navigation("PrepStudentOrgInfo");

                    b.Navigation("SourseGroupTransferOrders");

                    b.Navigation("StudentOrgInfo");

                    b.Navigation("StudyCards");

                    b.Navigation("TargetGroupTransferOrders");
                });

            modelBuilder.Entity("iuca.Domain.Entities.Users.Students.StudentBasicInfo", b =>
                {
                    b.Navigation("StudentContactInfo");

                    b.Navigation("StudentLanguages");

                    b.Navigation("StudentMinorInfo");

                    b.Navigation("StudentOrgInfo");

                    b.Navigation("StudentParentsInfo");
                });

            modelBuilder.Entity("iuca.Infrastructure.Identity.Entities.ApplicationUser", b =>
                {
                    b.Navigation("AcademicLeaveOrders");

                    b.Navigation("AdviserStudentInstructors");

                    b.Navigation("AdviserStudentStudents");

                    b.Navigation("AnnouncementSections");

                    b.Navigation("DeanAdviserAdvisers");

                    b.Navigation("DeanAdviserDeans");

                    b.Navigation("DeanDepartments");

                    b.Navigation("ExtraInstructors");

                    b.Navigation("GroupTransferOrders");

                    b.Navigation("InstructorBasicInfo");

                    b.Navigation("OldStudyCardCourses");

                    b.Navigation("ReinstatementExpulsionOrders");

                    b.Navigation("StaffBasicInfo");

                    b.Navigation("StudentBasicInfo");

                    b.Navigation("StudentCourseGrades");

                    b.Navigation("StudentCourseRegistrations");

                    b.Navigation("StudentDebts");

                    b.Navigation("StudentSemesterGPA");

                    b.Navigation("StudentTotalGPA");

                    b.Navigation("TransferCourses");

                    b.Navigation("UserBasicInfo");

                    b.Navigation("UserTypeOrganizations");
                });
#pragma warning restore 612, 618
        }
    }
}
